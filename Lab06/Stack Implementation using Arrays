// Online C++ compiler to run C++ program online
#include <iostream>
#include <chrono>
#define stackSize 20

using namespace std;

int stack[stackSize];
int top = -1;

//Checks if the Stack is empty
bool isEmpty() {
    return top == -1;
}

//Checks if the Stack is full
bool isFull() {
    return top == stackSize - 1;
}    

//Pushes the given data onto the stack
void Push(int data) {
    if (isFull()) {
        cout << "Stack Overflow" << endl;
    }
    else {
        top += 1;
        stack[top] = data;
    }
}

//Deletes the topmost element of the stack and returns that value    
int Pop() {
    if (isEmpty()) {
        cout << "Stack Underflow" << endl;
        return -1;
    }
    else {
        int data = stack[top];
        top -= 1;
        return data;
    }
}

//Returns the topmost value of the stack
int StackTop() {
    if (isEmpty()) {
        return -1;
    }
    else {
        return stack[top];
    }
}

//Displays the stack from top to bottom
void Display() {
    if (isEmpty()) {
        cout << "Stack is empty" << endl;
    }
    else {
        cout << "Stack:" << endl;
        for (int i = top; i >= 0; i--) {
            cout << stack[i] << endl;
        }
        cout << endl;
    }
}

int main(){
    // Measure the time it takes for the function to run
    auto start_time = chrono::high_resolution_clock::now();
    Push(8);
    Push(10);
    Push(5);
    Push(11);
    Push(15);
    Push(23);
    Push(6);
    Push(18);
    Push(20);
    Push(17);;
    Display();
    Pop();
    Pop();
    Pop();
    Pop();
    Pop();
    Display();
    Push(4);
    Push(30);
    Push(3);
    Push(1);
    Display();
    auto end_time = chrono::high_resolution_clock::now();
    
    auto elapsed_time_ms = chrono::duration_cast<chrono::microseconds>(end_time - start_time).count();

    cout << "Elapsed time for Stack operations using Array Implementation: " << elapsed_time_ms << " microseconds" << endl;
}
